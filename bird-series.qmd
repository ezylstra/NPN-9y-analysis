---
title: "Exploration of bird data for USGS analysis"
date: "`r format(Sys.time(), '%d %B, %Y')`"
author: "Erin Zylstra"
execute: 
  error: false
  warning: false
  message: false
format: 
  html:
    code-fold: true
    fig-cap-location: top
    page-layout: full
editor: visual
---

```{r}
#| echo: false

library(dplyr)
library(stringr)
library(lubridate)
library(ebirdst)
library(terra)
library(tidyterra)
library(ggplot2)
library(cowplot)
```

## Overview

This analyses uses the first observations of plant or animal phenophases in a given year to evaluate trends and/or identify the effect of climate on phenology. Data were limited to "series" of observations of the same plant or the same animal species at the same site over nine or more years since 2009. Here, we looked closely at observations of birds and evaluated whether any filtering of series (all combinations of species, sites, and phenophases) is needed before analyses are conducted. We might exclude a series because we do not expect a seasonal signal in the time at which that phenophase occurs (e.g., the species may be a resident, and thus, observations of live individuals are expected throughout the year) or because the information is redundant with another series in the analysis (e.g., similar or nested phenophase for the same species and site). We also evaluated whether changes in the time had which a phenophase is first observed should be evaluated separately for different "types" of phenophaes or whether all phenophases could be grouped together.

Information about series of bird observations with at least nine years of data that could potentially be included in analyses come from an internal file created by Janet Prev`r knitr::asis_output("\U00E9")`y (birds_mammals_phenophases_locations.csv). The first few rows of the file look like the following, where "n" is the number of years in each series:

```{r load-data}
#| code-fold: true

df <- read.csv("data/birds_mammals_phenophases_locations.csv") %>%
  select(-kingdom)

knitr::kable(head(select(df, -group), align = "r"))
```

#### Modifications to data file

Before evaluating the series, we needed a little clean up to remove mammal species, remove one amphibian (spring peeper), classify oak titmouse and tufted titmouse as birds, and correct the spelling of gray catbird.

```{r}
#| code-fold: true

# Remove spring peeper (amphibian) from dataframe
df <- df %>%
  filter(!str_detect(common_name, "peeper"))

# Correct classification of titmice (birds, but listed as mammals)
df <- df %>%
  mutate(group = ifelse(str_detect(common_name, "titmouse"), "Bird", group))

# Correct spelling for catbird
df <- df %>%
  mutate(common_name = str_replace(common_name, "grey catbird", "gray catbird"))

# Keep only bird data
df_birds <- df %>%
  filter(group == "Bird")

# Summary by species
spp <- df_birds %>%
  group_by(group, common_name) %>%
  summarize(n_php = n_distinct(phenophase_description),
            n_sites = n_distinct(site_id),
            n_series = n(),
            min_length = min(n),
            max_length = max(n),
            .groups = "keep") %>%
  data.frame()
```

## Taking migratory status/seasonal ranges into account:

In these analyses, observations are summarized over each calendar year. Thus, each series notes the first day of the calendar year that a phenophase (e.g., live individuals, nest building) was observed for a given species at a particular site. If a species is a year-round resident, or if it migrates but spends the first part of the year in a region that encompasses the site of interest, then assessing trends in the date on which live individuals were first observed at that site does not provide phenological insights. In these instances, the first date a phenophase was observed probably tells us more about when observers visited the site than about species ecology. For migratory species, we used seasonal range maps from [eBird](https://science.ebird.org/en/status-and-trends/range-maps) to identify whether a species was likely to be present at a site at the beginning of the year. To do this, we downloaded seasonal range maps (at a 9-km resolution) for all species classified as migratory. Here's an example for ruby-throated hummingbirds:

```{r ebird maps}
#| code-fold: true

# Extract information about species in eBird (need an eBird key to obtain these data)
ebird_spp <- ebirdst_runs %>% data.frame()

# Set eBird file directory path
ebird_path <- "ebird-ranges"

# Dataframe with NPN bird species
birds <- spp %>%
  filter(group == "Bird") %>%
  select(common_name, n_php, n_sites, n_series) %>%
  # Make common names all lowercase to match up easily with eBird common_names
  mutate(common_name_l = str_to_lower(common_name)) %>%
  mutate(ebird = ifelse(common_name_l %in% str_to_lower(ebird_spp$common_name), 
                        1, 0))

# Attach eBird info to NPN bird list
ebirds <- ebird_spp %>%
  mutate(common_name = str_to_lower(common_name)) %>%
  select(-contains("trends"), -rsquared, -beta0, -scientific_name)
birds <- birds %>%
  left_join(ebirds, by = c("common_name_l" = "common_name"))

# Download range maps for non-resident NPN bird species
  # for (spp6 in birds$species_code[birds$is_resident == FALSE]) {
  #   ebirdst_download_status(species = spp6,
  #                           path = ebird_path,
  #                           download_abundance = FALSE,
  #                           download_ranges = TRUE,
  #                           dry_run = FALSE,
  #                           pattern = "raw_9km",
  #                           show_progress = TRUE)
  # }

# Loop through species and extract range information
for (i in 1:nrow(birds)) {
  
  cn <- birds$common_name[i]
  code <- birds$species_code[i]
  
  # Extract locations and convert to SpatVector
  locs <- df_birds %>% 
    filter(common_name == cn) %>%
    select(-group, -phenophase_description, -n) %>%
    distinct()
  
  # If species is migratory, extract information about seasonal ranges
  if (birds$is_resident[i] == FALSE) {
  
    # Convert NPN locations to SpatVector
    locs$loc <- as.numeric(rownames(locs))
    locs <- vect(locs, geom = c("longitude", "latitude"), 
                 crs = "epsg:4326", keepgeom = TRUE)

    # Load species range
    range <- load_ranges(species = code, 
                         resolution = "9km", 
                         smoothed = FALSE,
                         path = ebird_path)
    range <- vect(range)
    
    if (cn == "ruby-throated hummingbird") {
      p_b <- ggplot(data = subset(range, range$season == "breeding")) +
        geom_spatvector(aes(fill = season), 
                        fill = "#F8766D", show.legend = FALSE) +
        geom_spatvector(data = locs) +
        labs(title = element_text("Breeding"))
      p_nb <- ggplot(data = subset(range, range$season == "nonbreeding")) +
        geom_spatvector(aes(fill = season), 
                        fill = "#abd9e9", show.legend = FALSE) +
        geom_spatvector(data = locs) +
        labs(title = element_text("Nonbreeding"))
      p_m1 <- ggplot(data = subset(range, range$season == "prebreeding_migration")) +
        geom_spatvector(aes(fill = season), 
                        fill = "#ffffbf", show.legend = FALSE) +
        geom_spatvector(data = locs) +
        labs(title = element_text("Pre-breeding migration"))
      p_m2 <- ggplot(data = subset(range, range$season == "postbreeding_migration")) +
        geom_spatvector(aes(fill = season), 
                        fill = "#abdda4", show.legend = FALSE) +
        geom_spatvector(data = locs) +
        labs(title = element_text("Post-breeding migration"))
      
      maps <- plot_grid(p_m1, p_b, p_m2, p_nb, nrow = 2)
    }
    
    # For each location, extract seasons bird is present
    ext_ranges <- terra::extract(range, locs)
    ranges <- left_join(select(ext_ranges, - common_name), 
                        data.frame(locs),
                        by = c("id.y" = "loc")) %>%
      group_by(species_code, common_name, site_id, latitude, longitude) %>%
      summarize(b = ifelse("breeding" %in% season, 1, 0),
                nb = ifelse("nonbreeding" %in% season, 1, 0),
                m1 = ifelse("prebreeding_migration" %in% season, 1, 0),
                m2 = ifelse("postbreeding_migration" %in% season, 1, 0),
                .groups = "keep") %>%
      mutate(resident = FALSE) %>%
      data.frame()
  
  } else {
    ranges <- cbind(species_code = code, locs) %>%
      mutate(b = 1,
             nb = 1,
             m1 = 1,
             m2 = 1,
             resident = TRUE)
  }
  
  # Merge info for all species
  if (i == 1) {
    spp_ranges <- ranges
  } else {
    spp_ranges <- rbind(spp_ranges, ranges)
  }
}
```

```{r RTHU-map}
#| fig-cap: Seasonal range maps for ruby-throated hummingbirds based on observations submitted to eBird. Black dots denote sites where the species was observed (via USA-NPN's Nature's Notebook) for nine or more years.
#| fig-width: 12
#| fig-height: 12
#| echo: false

maps
```

For each species, we determined which season (breeding, nonbreeding, pre-breeding migration, post-breeding migration) overlapped January 1st. Then, by inspecting which sites fall within the range map for that season, we determined whether the species was likely to be present at that site at the beginning of the year ("Present on Jan 1" variable in table excerpt below):

```{r present-jan1}
#| code-fold: true

# For each migratory species, identify season that encompasses start of calendar 
# year (Jan 1)

# Put seasonal dates for each species-season combination into long form
mig_birds_nb <- birds %>%
  filter(is_resident == FALSE) %>%
  select(common_name, contains("nonbreeding")) %>%
  mutate(season = "nb")
colnames(mig_birds_nb) <- str_remove_all(colnames(mig_birds_nb),
                                         "nonbreeding_")
mig_birds_m1 <- birds %>%
  filter(is_resident == FALSE) %>%
  select(common_name, contains("prebreeding_migration")) %>%
  mutate(season = "m1")
colnames(mig_birds_m1) <- str_remove_all(colnames(mig_birds_m1),
                                         "prebreeding_migration_") 
mig_birds_b <- birds %>%
  filter(is_resident == FALSE) %>%
  select(common_name, breeding_quality, breeding_start, breeding_end) %>%
  mutate(season = "b")
colnames(mig_birds_b) <- str_remove_all(colnames(mig_birds_b), "breeding_")
mig_birds_m2 <- birds %>%
  filter(is_resident == FALSE) %>%
  select(common_name, contains("postbreeding_migration")) %>%
  mutate(season = "m2")
colnames(mig_birds_m2) <- str_remove_all(colnames(mig_birds_m2),
                                         "postbreeding_migration_") 

# Rbind all the seasonal data and make late day-of-years negative (so we can identify which one 
# overlaps zero)
mig_birds <- rbind(mig_birds_nb, mig_birds_m1, mig_birds_b, mig_birds_m2) %>%
  filter(!is.na(start)) %>%
  mutate(doy1 = yday(start),
         doy2 = yday(end)) %>%
  # When season overlaps Jan 1, make start date negative
  mutate(doy1 = ifelse(doy1 > doy2, -1 *(366 - doy1), doy1))

# Duplicate season that overlaps Jan 1 with start = doy and end = 365 + doy
mig_birds_add <- mig_birds %>%
  filter(doy1 < 0) %>%
  rename(doy1_old = doy1,
         doy2_old = doy2) %>%
  mutate(doy1 = yday(start),
         doy2 = 365 + yday(end)) %>%
  select(-c(doy1_old, doy2_old))

# Find which season overlaps Jan 1
mig_birds <- rbind(mig_birds, mig_birds_add) %>%
  rowwise() %>%
  mutate(jan1 = ifelse(1 %in% doy1:doy2, 1, 0)) %>%
  ungroup() %>%
  data.frame()
mig_birdspp <- mig_birds %>%
  group_by(common_name) %>%
  summarize(jan1 = season[jan1 == 1]) %>%
  data.frame()

# Add season to spp_ranges dataframe
spp_ranges <- spp_ranges %>%
  left_join(mig_birdspp, by = "common_name")

# For each species and location, indicate whether species is supposed to be 
# present on Jan 1
spp_ranges$present_jan1 <- NA
for (i in 1:nrow(spp_ranges)) {
  if (spp_ranges$resident[i] == TRUE) {
    spp_ranges$present_jan1[i] <- 1
  } else {
    season <- spp_ranges$jan1[i]
    spp_ranges$present_jan1[i] <- ifelse(spp_ranges[i, season] == 1, 1, 0)
  }
}

# Append information about presence of species on Jan 1 to original dataframe
# (row for each observation series = species-site-phenophase)
df_birds <- df_birds %>%
  left_join(select(spp_ranges, common_name, site_id, 
                   resident, jan1, present_jan1), 
            by = c("common_name", "site_id"))

knitr::kable(x = select(df_birds, -c(group, phenophase_description, n, jan1))[60:65,],
             row.names = FALSE, 
             align = c("l", "c", "c", "c", "c", "c"),
             col.names = c("Species", "Site ID", "Latitude", "Longitude", "Resident", "Present on Jan 1"))
```

## Taking phenophase "type" into account:

We classified phenophases into three "types": phenophases that indicate whether individuals of that species were detected by observers (presence), phenophases that describe a behavior, usually associated with breeding or mating (behavior), and phenophases that describe feeding activities (feeding).

Understanding when species exhibit behaviors associated with breeding or mating and how the timing of these phenophases may shift over time or in response to climate is of interest, regardless of whether the species is migratory or not. Thus, it seems reasonable to include all behavior-type phenophases in analyses. Similarly, many of the feeding phenophases relate to seasonal resources (e.g., flowers, insects), so it might also make sense to include all of these series in analyses, at least for now.

In contrast, we are probably only interested in evaluating changes in the first date a species is observed if the species is unlikely to be present at the beginning of the year. So for presence-related phenophases, we may want to exclude series for species that are likely present at that site on January 1st. It is worth noting that we are classifying "Calls or song" as a presence-type phenophase, as observers were instructed to record a yes for this phenophase when they heard a species vocalize but did not see it. This phenophase is distinct from "Singing individuals", which is used to record observations of bird vocalizations associated with breeding, mating, or territorial behaviors.

```{r phenophase-type}
#| code-fold: true

# Add phenophase_type label (making these explicit for easy changes)
df_birds <- df_birds %>%
  mutate(phenophase_type = case_when(
    phenophase_description == "Live individuals" ~ "presence",
    phenophase_description == "Individuals at a feeding station" ~ "presence",
    phenophase_description == "Calls or song (birds)" ~ "presence",
    phenophase_description == "Singing individuals (birds)" ~ "behavior",
    phenophase_description == "Nest building (birds)" ~ "behavior",
    phenophase_description == "Fruit/seed consumption" ~ "feeding",
    phenophase_description == "Insect consumption" ~ "feeding",
    phenophase_description == "Flower visitation" ~ "feeding",
    .default = NA
  ))

phpt <- df_birds %>%
  count(phenophase_description, phenophase_type) %>%
  arrange(phenophase_type) %>%
  mutate(rule_word = case_when(
    phenophase_type == "presence" ~ "Include if absent on 1 Jan",
    .default = "Include"
  ))

df_birds <- df_birds %>%
  mutate(include = case_when(
    phenophase_type %in% c("behavior", "feeding") ~ 1,
    present_jan1 == 0 ~ 1,
    .default = 0
  ))
include <- filter(df_birds, include == 1)

knitr::kable(x = phpt,
             col.names = c("Phenophase", "Phenophase type", "No. data series", "Include/Exclude"),
             align = c("l", 'l', "c", "l"))
```

\
If we use the suggested rules outlined in the table above, we would exclude `r sum(df_birds$include == 0)` series, leaving `r sum(df_birds$include == 1)` series still in consideration.

## Removing data series with redundant information:

For some species, there may be instances where a positive observation of one phenophase is usually or always associated with a positive observation of another phenophase. For instance, if an observer reported that there were individuals at a feeding station, they likely also reported that they observed live individuals on the same day. Including data series for both of these phenophases for the same species at the same site is likely to be redundant, and thus, one of the data series should probably be excluded from analyses. That said, all series should be included if there are reasons to believe that information from related series are independent and provide unique insights into species phenology. For some species at particular sites, it may be necessary to evaluate whether the dates in one series are sufficiently different than dates in a related series.

#### Species presence

```{r presence-count}
#| code-fold: true

presence <- include %>%
  filter(phenophase_type == "presence") %>%
  group_by(common_name, site_id) %>%
  summarize(live = ifelse("Live individuals" %in% phenophase_description, 1, 0),
            station = ifelse("Individuals at a feeding station" %in% phenophase_description, 1, 0),
            calls = ifelse("Calls or song (birds)" %in% phenophase_description, 1, 0),
            .groups = "keep") %>%
  data.frame()

presence_count <- count(presence, live, station, calls)

# Remove all "Individuals at feeding station" series since they're always
# accompanied by "Live individuals" series
include <- include %>%
  filter(phenophase_description != "Individuals at a feeding station")

# If a species-site combination has "Calls or song" and "Live individuals",
# then remove the "Calls or song" series
presence_dups <- presence %>%
  filter(calls == 1 & live == 1) %>%
  select(common_name, site_id) %>%
  mutate(phenophase_description = "Calls or song (birds)",
         remove = 1)
include <- include %>%
  left_join(presence_dups, 
            by = c("common_name", "site_id", "phenophase_description")) %>%
  filter(is.na(remove)) %>%
  select(-remove)
```

For every species-site combination that had a data series for "Individuals at a feeding station" (n = `r sum(presence_count$n[presence_count$station == 1])`), there was also a data series for "Live individuals". It seems reasonable to exclude the `r sum(presence_count$n[presence_count$station == 1])` "Individuals at a feeding station" data series from analyses. There were also `r sum(presence_count$n[presence_count$calls == 1 & presence_count$live == 1])` species-site combinations that had both "Live individuals" and "Calls or song" series. Here, we might suggest removing the "Calls or song" series since it is likely to provide the same, or very similar, information to that contained in the "Live individuals" series.

## Summary of remaining data series

```{r summary}
#| code-fold: true

# Create "include2" variable to indicate whether a series should be included in analyses after 
# accounting for all factors
include <- include %>%
  rename(include2 = include)
df_birds <- df_birds %>%
  left_join(select(include, common_name, site_id, phenophase_description, include2),
            by = c("common_name", "site_id", "phenophase_description")) %>%
  mutate(include2 = replace_na(include2, replace = 0))

# Summarize by species
spp_include <- include %>%
  group_by(common_name, resident) %>%
  summarize(n_series = n(),
            n_sites = n_distinct(site_id),
            n_php_types = n_distinct(phenophase_type),
            n_php = n_distinct(phenophase_description),
            .groups = "keep") %>%
  arrange(common_name, .locale = "en") %>%
  data.frame()

php_include <- include %>%
  group_by(phenophase_type, phenophase_description) %>%
  summarize(n_series = n(),
            n_spp = n_distinct(common_name),
            n_sites = n_distinct(site_id),
            .groups = "keep") %>%
  arrange(factor(phenophase_type, levels = c("presence", "behavior", "feeding")), desc(n_series)) %>%
  data.frame()
```

After considering location, migratory status, phenophase type, and potential redundancies, there are fewer data series that provide unique information to assess changes in phenology. If we adopted all the suggested filters described above, we would retain only `r sum(df_birds$include2)` of the `r nrow(df_birds)` potential series. The remaining series represent `r nrow(spp_include)` species, (`r sum(spp_include$resident == FALSE)` of which are migratory, `r sum(spp_include$resident == TRUE)` are residents), `r n_distinct(include$site_id)` sites, and `r nrow(php_include)` phenophases.

```{r}
#| label: spp-include
#| tbl-cap: Summary of remaining data series, by species.
#| echo: false

knitr::kable(spp_include,
             col.names = c("Species", "Resident", "No. data series", "No. sites", 
                           "No. phenophase types", "No. phenophases"),
             align = c("l", "c", "c", "c", "c", "c")) 
```

```{r}
#| label: php-include
#| tbl-cap: Summary of remaining data series, by phenophase
#| echo: false

knitr::kable(php_include,
             col.names = c("Phenophase type", "Phenophase", "No. data series", "No. species", "No. sites"),
             align = c("l", "l", "c", "c", "c")) 
```

\
Of the remaining phenophases, there seems to be a distinction between those that indicate when migratory species arrive at a site (presence phenophases) and those that indicate when mating, breeding, or feeding activities commence (behavior, feeding phenophases). Given that the timing of these events may be influenced by different factors, that could occur in different regions or at different spatial scales, it might make sense to evaluate trends in presence-related phenophases separately from other phenophases.
